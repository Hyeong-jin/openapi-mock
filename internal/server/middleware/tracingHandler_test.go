package middleware

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"net/http"
	"net/http/httptest"
	"regexp"
	"testing"
)

const uuidRegExp = "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"

type handlerMock struct {
	mock.Mock
}

func (mock *handlerMock) ServeHTTP(responseWriter http.ResponseWriter, request *http.Request) {
	mock.Called(responseWriter, request)
}

func TestTracingHandler_ServeHTTP_RequestWithId_IdSetToContext(t *testing.T) {
	request, _ := http.NewRequest("GET", "/", nil)
	request.Header.Set("X-Request-Id", "00000000-0000-0000-0000-000000000000")
	recorder := httptest.NewRecorder()
	nextHandler := handlerMock{}
	handler := TracingHandler(&nextHandler)
	nextHandler.
		On("ServeHTTP", mock.Anything, mock.MatchedBy(requestWithNilUUIDMatcher)).
		Return(nil).
		Once()

	handler.ServeHTTP(recorder, request)

	assert.Equal(t, "00000000-0000-0000-0000-000000000000", recorder.Header().Get("X-Request-Id"))
	nextHandler.AssertExpectations(t)
}

func TestTracingHandler_ServeHTTP_RequestWithoutId_AutogeneratedIdSetToContext(t *testing.T) {
	request, _ := http.NewRequest("GET", "/", nil)
	recorder := httptest.NewRecorder()
	nextHandler := handlerMock{}
	handler := TracingHandler(&nextHandler)
	nextHandler.
		On("ServeHTTP", mock.Anything, mock.MatchedBy(requestWithRandomUUIDMatcher)).
		Return(nil).
		Once()

	handler.ServeHTTP(recorder, request)

	assert.Regexp(t, uuidRegExp, recorder.Header().Get("X-Request-Id"))
	nextHandler.AssertExpectations(t)
}

func requestWithNilUUIDMatcher(request *http.Request) bool {
	id, _ := request.Context().Value(requestIDKey).(string)

	return id == "00000000-0000-0000-0000-000000000000"
}

func requestWithRandomUUIDMatcher(request *http.Request) bool {
	re := regexp.MustCompile(uuidRegExp)
	id, _ := request.Context().Value(requestIDKey).(string)

	return re.MatchString(id)
}
